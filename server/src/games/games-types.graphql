enum GameMode {
  Solo
  Multiplayer
}

input GameInput {
  categoryName: String!
  difficultyName: String!
  gameCode: String!
  gameMode: GameMode!
}

type Answer {
  correct: String!
  incorrect: [String!]!
}

type Question {
  id: Int!
  gameCode: String!
  name: String!
  answer: Answer!
  startTime: String!
  duration: Int!
  latency: Int!
  questionAmount: Int
}

input PlayerAnswers {
  questionID: Int!
  isCorrect: Boolean!
}

input SeekGameInput {
  categoryName: String!
  difficultyName: String!
}

type OpponentFound {
  playerOneID: Int!
  playerTwoID: Int!
  gameCode: String!
}

input CurrentAnswer {
  playerID: Int!
  isCorrect: Boolean!
}

type OpponentAnswer {
  gameCode: String!
  playerID: Int!
  isCorrect: Boolean!
}

type Mutation {
  createGame(gameData: GameInput!): Boolean
  createSoloGame(gameData: GameInput!): Boolean
  createMutliplayerGame(gameData: GameInput!): Boolean
  seekGame(seekGameInput: SeekGameInput!): Boolean
  cancelSeekingGame(seekGameInput: SeekGameInput!): Boolean
  sendGameSummary(
    gameCode: String!
    playerAnswers: [PlayerAnswers!]!
    playerScore: Int!
  ): HistoryInput!
  stopGame(gameCode: String!): Boolean
  endRound(gameCode: String!, currentAnswer: CurrentAnswer): Boolean
}

type Subscription {
  newQuestion(gameCode: String!): Question!
  opponentFound(playerID: Int!): OpponentFound!
  opponentAnswer(gameCode: String!, playerID: Int!): OpponentAnswer!
}
